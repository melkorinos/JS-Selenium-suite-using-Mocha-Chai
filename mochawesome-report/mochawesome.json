{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2021-10-25T18:29:14.764Z",
    "end": "2021-10-25T18:29:48.528Z",
    "duration": 33764,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e02ae9b7-6665-4a71-8525-561a8cf89b83",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e127e8ba-7f04-4ebd-bd95-7b9b37b8dab2",
          "title": "Tests for another feature would go here",
          "fullFile": "C:\\Users\\Dimitris\\Desktop\\study\\Ticketswap final\\test\\otherFeatureTests.js",
          "file": "\\test\\otherFeatureTests.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Tests for another feature would go here\"",
              "fullTitle": "Tests for another feature would go here \"before each\" hook in \"Tests for another feature would go here\"",
              "timedOut": null,
              "duration": 617,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"chrome\").build();\ndriver.get(\"https://www.ticketswap.com/\");",
              "err": {},
              "uuid": "5de5af52-9b5f-4c5a-86a0-0df2e88c6880",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Tests for another feature would go here\"",
              "fullTitle": "Tests for another feature would go here \"after each\" hook in \"Tests for another feature would go here\"",
              "timedOut": null,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "a87d7e02-d52f-4488-8224-328e53974ec5",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "First test of other feature, this sample tests if there is a facebook element for a non logged user",
              "fullTitle": "Tests for another feature would go here First test of other feature, this sample tests if there is a facebook element for a non logged user",
              "timedOut": null,
              "duration": 3612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//click the sell tickets button\nawait driver.findElement(By.xpath('//*[@id=\"__next\"]/div[1]/div/nav/ul/li[6]/a')).click();\n//wait till onboarding page loads\nawait driver.wait(until.elementLocated(By.xpath('//*[@id=\"__next\"]/div[3]/div[1]/button'),10000));\n//click the start selling button\nawait driver.findElement(By.className('css-8cc4q9 e1dvqv261')).click();\n//wait till login pop up loads, look for page header\nawait driver.wait(until.elementLocated(By.xpath('/html/body/ticketswap-portal[7]/div/div/header'),10000));\n\n//find the facebook login element\nawait driver.findElement(By.xpath('/html/body/ticketswap-portal[7]/div/div/div/div/div/div/div/button[1]')).then((element)=>{\n  //chai assert\n  expect(element).to.exist;\n});\n\n//new it block goes here",
              "err": {},
              "uuid": "aeca680b-3060-4391-b7c3-af0d64ca28ad",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aeca680b-3060-4391-b7c3-af0d64ca28ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3612,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "9beab0ce-3f56-43b4-868d-8fb3373ab15c",
          "title": "Assignment : Search field tests",
          "fullFile": "C:\\Users\\Dimitris\\Desktop\\study\\Ticketswap final\\test\\searchBarTests.js",
          "file": "\\test\\searchBarTests.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Assignment : Search field tests\"",
              "fullTitle": "Assignment : Search field tests \"before each\" hook in \"Assignment : Search field tests\"",
              "timedOut": null,
              "duration": 533,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"chrome\").build();\ndriver.get(\"https://www.ticketswap.com/\");",
              "err": {},
              "uuid": "7f3bddf8-0886-4af8-8e86-a984bdada110",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Assignment : Search field tests\"",
              "fullTitle": "Assignment : Search field tests \"after each\" hook in \"Assignment : Search field tests\"",
              "timedOut": null,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "5092104e-5a8a-41fe-9057-99d4ec7e4e48",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Test 1: Ensures special characters are handled from the server. Character = ",
              "fullTitle": "Assignment : Search field tests Test 1: Ensures special characters are handled from the server. Character = ",
              "timedOut": null,
              "duration": 19680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var search_query = naughty;\n      //send keys to the search box\n      await driver.findElement(By.id('site-search-input')).sendKeys(search_query);\n      //wait for 1 second\n      driver.sleep(1000);\n      \n      //get the element that includes the text\n      let result = await driver.wait(until.elementLocated(By.className('css-5gnb7e eeor7st12'),10000));\n      //Assert the element exists and has text \n      let resultText = await result.getText();\n      //expect the element to exist and to have text\n      expect(result).to.exist;\n      expect(resultText).to.exist;",
              "err": {},
              "uuid": "9dfc125c-833c-4470-838b-70071478079b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test 1: Ensures special characters are handled from the server. Character = undefined",
              "fullTitle": "Assignment : Search field tests Test 1: Ensures special characters are handled from the server. Character = undefined",
              "timedOut": null,
              "duration": 3202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var search_query = naughty;\n      //send keys to the search box\n      await driver.findElement(By.id('site-search-input')).sendKeys(search_query);\n      //wait for 1 second\n      driver.sleep(1000);\n      \n      //get the element that includes the text\n      let result = await driver.wait(until.elementLocated(By.className('css-5gnb7e eeor7st12'),10000));\n      //Assert the element exists and has text \n      let resultText = await result.getText();\n      //expect the element to exist and to have text\n      expect(result).to.exist;\n      expect(resultText).to.exist;",
              "err": {},
              "uuid": "8b1792a7-4533-47d7-9e5a-4add40abb27e",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test 1: Ensures special characters are handled from the server. Character = undef",
              "fullTitle": "Assignment : Search field tests Test 1: Ensures special characters are handled from the server. Character = undef",
              "timedOut": null,
              "duration": 3404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var search_query = naughty;\n      //send keys to the search box\n      await driver.findElement(By.id('site-search-input')).sendKeys(search_query);\n      //wait for 1 second\n      driver.sleep(1000);\n      \n      //get the element that includes the text\n      let result = await driver.wait(until.elementLocated(By.className('css-5gnb7e eeor7st12'),10000));\n      //Assert the element exists and has text \n      let resultText = await result.getText();\n      //expect the element to exist and to have text\n      expect(result).to.exist;\n      expect(resultText).to.exist;",
              "err": {},
              "uuid": "5e3dfb90-9171-4ce9-acdf-45deeb9edd1c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test 2 : Checks search query is included in test results",
              "fullTitle": "Assignment : Search field tests Test 2 : Checks search query is included in test results",
              "timedOut": null,
              "duration": 4738,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//use a general term to receive many results\nvar search_query = \"Band\";\n//send keys to the search box\nawait driver.findElement(By.id(\"site-search-input\")).sendKeys(search_query);\n//wait till results drop down appears\nawait driver.wait(until.elementLocated(By.xpath('//*[@id=\"site-search-menu\"]/div[3]/a'),10000));\n//find and click more results button\nawait driver.findElement(By.xpath('//*[@id=\"site-search-menu\"]/div[3]/a')).click();\n//wait till next page loads\nawait driver.wait(until.elementLocated(By.xpath('//*[@id=\"__next\"]/div[2]/div[1]/h3'),10000));\n//collect all the search result elements and get their text\nlet elements = await driver.findElements(By.className('css-11rlpdz eh8fd905'))\nfor (let element of elements) {\n  let text = await element.getText();\n  //assert the text contains the search query\n  expect(text).to.include(search_query);\n}",
              "err": {},
              "uuid": "de5819f4-59df-4ad3-891d-729a05f92094",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9dfc125c-833c-4470-838b-70071478079b",
            "8b1792a7-4533-47d7-9e5a-4add40abb27e",
            "5e3dfb90-9171-4ce9-acdf-45deeb9edd1c",
            "de5819f4-59df-4ad3-891d-729a05f92094"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31024,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "autoOpen": "true"
      },
      "version": "5.2.0"
    }
  }
}